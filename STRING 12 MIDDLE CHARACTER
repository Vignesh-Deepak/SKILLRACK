The program must accept N string values as the input.
The program must calculate the length of each string 
if the length is odd then the program must print the middle character in the string.
Else the program must print the middle two characters in the given string as the output.
Boundary Condtion(s):
1 <= N <= 20
1 <= Length of each string <= 100
Input Format:
The first line contains the integer value of N.
The next N lines contain a string in each line.
Output Format:
The first N lines contain either a character or two characters.
Example Input/Output 1:
Input: 3
hello orange watermelon
Output: l an rm 
Example Input/Output 2:
Input: 4
lion mountain apple world
Output: io nt p r
int main()
{
  int N;
  scanf("%d",&N);
  char str[101];
  for(int i=0;i<N;i++) // IF N AND STRING COMES FIRST ITERATION SHOULD BE TILL N AND SECOND CAN BE BASED ON STR[I]!='\0'
  {
    scanf("%s",str);
    int len= strlen(str);
    if(len%2!=0){
    printf("%c\n",str[len/2]);
    }
    else
    {
        printf("%c%c\n",str[len/2 -1],str[len/2]);  // IF EVEN COMES TWO MIDDLE CHARACTERS
    }
    
  }
}
method 2 functions 2 types
type 1
void character(*str) // void is used when nothing to be returned 
{ 
  
  for(int i=0;i<N;i++) 
  {
    scanf("%c",str);// comes in main or functions // when comes in functions are we have to create another simlar string for proceeding or not
    int len= strlen(str);
    if(len%2!=0){
    printf("%c\n",str[len/2]);
   
    }
    else
    { 
        
       printf("%c%c\n",str[len/2 -1],str[len/2]);  
    }
    
  }
  
}
int main()
{
 int N;
 scanf("%d",&N);
 char str[101];
 scanf("%s",str) or fgets(str,101,stdin);
 character(); // in functions we cannot pass more than one parameter  
 }
 type 2
char character(*str) // char is used when  to be returned   // we can also use another  string having different address but having same value as str (but use same parameter used in both) eventhough both are same variable they have different address 
{ 
  char b[3];// 2 even 1 odd
  for(int i=0;i<N;i++) 
  {
    scanf("%c",str);// dont needed because already we got input from in main function , we can also as str1 similar to a as a1 here str as str1 both are same values but having different address they are accessed with reference or pointer for same value 
    int len= strlen(str);
    if(len%2!=0){
    b[0]=str[len/2];
    return b[0];
   
    }
    else
    { 
       b[0]=str[len/2-1];
       b[1]=str[len/2]; 
       return b[0];  // return b is enough for both b element array
       return b[1];// return b; is best => simple b is also resemble array because it is already declared , similar to pointer.   
    }
    
  }
  
}
int main()
{
 //char b[3];// doubt here we dont need because it is completely belongs to function parameter
 int N;
 scanf("%d",&N);
 char str[101];
 scanf("%s",str) or fgets(str,101,stdin);
 printf("%s",character(b)); // in functions we cannot pass more than one parameter  
 }
