The program must accept N string values as the input.
The program must print the N string values sorted lexicographically in descending order as the output.
Note: All the alphabets are lowercase in each string.
Boundary Condition(s):
1 <= N <= 50
1 <= Length of each string <= 1000
Input Format:
The first line contains the integer N.
The next N lines each contain a string.
Output Format:
The first N lines each contain a string after sorted lexicographically in descending order.
Example Input/Output 1:
Input:
4
project
elephant
tiger
time
Output:
time
tiger
project 
elephant
Example Input/Output 2: 
Input:
5
orange
watermelon
pineapple
lemon
strawberry
Output:
watermelon
strawberry
pineapple
orange
lemon

#include<stdio.h>
#include<stdlib.h>

int main()                    // LEXICOGRAPHICALLY MEANS PROPER ALPHABETICAL ORDER
{
    int N;                  // N REPRESENTS NO OF WORDS NOT CHARACTERS
    scanf("%d",&N);
    char str[N][1001]; // DOUBT WHY 2 DIMENSION because N for number of inputs boundary condition , 1001 for string boundary condition
    int i=0;
    while(i<N)
    {
        scanf("%s",str[i]);
        i++;
    }
    for(int i=0;i<N;i++) i=0 means first single word not character    // check for <N &<N-1(cannot because 0 cmp with 1 2 3)
    {
        for(int cmpindex=i+1;cmpindex<N;cmpindex++) i+1 > 2nd single word not character  
        {
            if(strcmp (str[i],str[cmpindex])<0)   // (check first character occurence of the word are same) STRCMP < 0 MEANS IT IS IN PROPER ALPHABETICAL ORDER   => GIVING IT as condition 
             {
               char temp[1001];                   
               strcpy(temp,str[i]);                   // similar to temp=str[i]; 
               strcpy(str[i],str[cmpindex]);                        str[i]=str[cmpindex];
               strcpy(str[cmpindex],temp);                          str[cmpindex]=temp;
            
             }
        }
        printf("%s",str[i]);
    }
    

} 

TEST CHASES                                                                                                     (imp= one swap at a iteration) 
N=4                 iteration 1                                                                                   iteration 1      iteration 2     iteration 3     iteration 4      5
project             1 p compare with e(already in lexicograph descending),                                          >tiger        time            time            time           time
elephant            2 p compare with t(false change) swap p with tiger                                              elephant     elephant        project         tiger          tiger
tiger                                                                                                              >project      project         elephant        elephant       project
time                                                                                                                time         tiger           tiger           project        elephant
o/p
time
tiger                                                                                                                         
project 
elephant
