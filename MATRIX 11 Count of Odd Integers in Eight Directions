 The program must accept an integer matrix of size NxN and an integer X as the input. 
 The program must print the count of odd integers present in all the eight directions (if available) of X in the matrix as the output.
 If X has occurred more than once then consider the first occurrence of X. 
 If X has not occurred in the matrix then the program must print -1 as the output.
 Boundary Condition(s):
 1 <= N <= 100
 Input Format: The first line contains the value of N.
 The next N lines contain N integers separated by space(s).
 The (N+2)th line contains the value of X. 
 Output Format: 
 The first line contains either the count of odd integers present in all the eight directions (if available) of X in the matrix or -1.
 Example Input/Output 1:
 Input: 6
 56 56 44 10 42 64
 81 54 83 16 50 57 
 48 93 12 66 78 32
 75 84 54 65 85 97
 77 32 95 12 65 66 
 25 13 96 67 98 43
 X=12 IN FIRST EXAMPLE
 
 Output: 7 
 Explanation: X = 12 
 Here 12 has occurred for two times in the matrix. 
 So consider the first occurrence of 12 which is present at the 3rd row and the 3rd column.
 The elements present in all the eight directions are
 56 56 44 10 42 64
 81 54 83 16 50 57
 48 93 12 66 78 32
 75 84 54 65 85 97
 77 32 95 12 65 66 
 25 13 96 67 98 43
 So the count of odd integers in all the eight directions of 12 is 7. Hence the output is 7 
 Example Input/Output 2:
 Input: 5 
 33 29 96 47 37
 84 82 80 69 61
 56 88 74 67 74
 11 50 93 58 54
 43 76 88 53 49
 X=19 
 Output: -1 // SINCE X IS NOT AVAILABLE IN MATRIX

#include<stdio.h>
#include<stdlib.h>

int main()
{
    int N,X;
    scanf("%d %d",&N,&X);
    int mat[N][N];
    for(int row=0;row<N;row++)
    {
        for(int col=0;col<N;col++)
        {
            scanf("%d",&mat[row][col]);
        }
        
    }
    //after this, finding the position of X in given matrix is the main task
    int xrow,xcol;
    int flag=0;
    for(int row=0;row<N;row++)
    {
        for(int col=0;col<N;col++)
        {
            if(X==mat[row][col])
            {
                xrow=row; //current row is assigned to xrow    here  mat[3][3]=12
                xcol=col; //current col
                flag=1;
                break; //exit immediate loop
            }
            // it exits col forloop    
            
        }
        if(flag==1)
        break; // again checking for exiting total for loop  
        
    }
    if(flag==0)
    {
        printf("-1");
    }
    
    int count=0;
    // traverse top check logic diagram in gallery
    for(int row=xrow-1;row>=0;row--) // here col is same ,row decrement  
    //always checking starts from X  1st=[3][3] 
                                // 2nd=[2][3]
                                //last=[1][3]
    {
        if(mat[row][xcol]%2!=0) // check for odd 
        {
            count++;
        }
    }
    
    // traverse top right
    for(int row=xrow-1,int col=xcol+1;row>=0&&col<N;row--,col++)
    {
        if(mat[row][col]%2!=0)
        {
            count++;
        }
    }
    // traverse right 
    for(int col=xcol+1;col<N;col++)
    {
        //here row is same col is incremented
        if(mat[xrow][col]%2!=0)
        {
            count++;
        }
    }
    //traverse bottom right
    for(int row=xrow+1,col=xcol+1;row<N&&col<N;row++,col++)
    {
        //here row is incremented col is incremented
        if(mat[row][col]%2!=0)
        {
            count++;
        }
        
    }
    //traverse bottom
    for(int row=xrow+1;row<N;row++)
    {
        //here col is same , only row is incremented
        if(mat[row][xcol]%2!=0)
        {
            count++;
        }
    }
    //opposite of previous four
    //traverse bottom left
    for(int row=xrow+1,col=xcol-1;row<N&&col>=0;row++,col--)
    {
        if(mat[row][col]%2!=0)
        {
            count++;
        }
    }
    // traverse left
    for(int col=xcol-1;col>=0;col--)
    {
        if(mat[xrow][col]%2!=0)
        {
            count++;
        }
    }
    //traverse up left
    for(int row=xrow-1,col=xcol-1;col>=0&&row>=0;row--,col--)
    {
        if(mat[row][col]%2!=0)
        {
            count++;
        }
    }
    printf("%d",count);
    
}
