The program must accept two integer matrices of same size RxC as the input.
For each integer at the same position in both the matrices are equal then the program must print T else print F as the output.
Boundary Condition(s): 
2 <= R, C <= 100
Input Format:
The first line contains the values of R and C separated by a space.
The next Rx2 lines contain C elements separated by space(s).
Output Format:
The first R lines contain C alphabets either T or F separated by space(s).
Example Input/Output 1:
Input: 5 4 
10 1 10 3
9  3 6  8 
7  4 2  3 
2  6 10 7
7  3 4  6 

10 8  7 3 
10 3 10 6 
8  1 2  4
4  1 7  6
9  9 2  6 
Output:
T  F  F T
F  T  F F
F  F  T F
F  F  F F
F  F  F T 
Example Input/Output 2: 
Input: 6 3
1 9 3
1 3 1
8 8 5 
8 6 5
2 4 9
6 3 1

6 10 2
9 6  7
9 7  1
6 1  3 
5 10 1
2  2 1  
Output:
F F F
F F F
F F F
F F F
F F F
F F T

#include<stdio.h>
#include<stdlib.h>

int main()
{
   int R,C;
   scanf("%d %d",&R,&C);
   int mat1[R][C],mat2[R][C];
   int value;
   //we can use mat2 or use only one integer to store the value int value;
   
   for(int row=0;row<R;row++)
   {
       for(int col=0;col<C;col++)
       {
           scanf("%d ",&mat1[row][col]); // read the first matrix
       }
   }// for second mat we directly read based on int value
   
   for(int row=0;row<R;row++)
   {
       for(int col=0;col<C;col++)
       {
           scanf("%d",&value); // we are just going to check mat[0][0] with value at [0][0]
           if(mat1[row][col]==value)
           {
               printf("T");
           }
           else
           {
               printf("F");
           }
       }
       printf("\n"); //new line after every row
   }
     
}
