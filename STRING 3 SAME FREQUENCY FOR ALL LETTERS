The program must accept a string S as the input.
The program must print YES if all the alphabets in the string S have the same frequency.
Else the program must print NO as the output.
Note: String S contains only lower-case alphabets.
Boundary Condition(s):
2 <= Length of String <= 1000
Input Format:
The first line contains the string S.
Output Format:
The first line contains either YES or NO.
Example Input/Output 1:
Input: 
venom Output:
YES
Explanation: The frequency for the alphabet 'v' is 1 The frequency for the alphabet 'e' is 1 The frequency for the alphabet 'n' is 1 The frequency for the alphabet 'o' is 1 The frequency for the alphabet 'm' is 1 Here all the alphabets have the same frequency 1 Hence the output YES is printed.
Example Input/Output 2:
Input:
better
Output: NO
Explanation: The frequency for the alphabet 'b' is 1 The frequency for the alphabet 'e' is 2 The frequency for the alphabet 't' is 2 The frequency for the alphabet 'r' is 1 Here the alphabets 'b' and 'r' have the frequency 1, but the alphabets 'e' and 't' have the frequency 2 Hence the output NO is printed.
int main()
{
char str[1001];
for(int i=0;str[i]!='\0';i++)
{
  scanf("%s",str[i]);
 }
int alphacount[26]={0},c=0;
for(int i=0;str[i]!='\0';i++)
{
  alphacount[str[i]-'a'];
  alphacount++;
 }
 //COUNT AND ALPHACOUNT BOTH ARE SIMILAR 
 // initially taking first element frequency for easy understanding eg here we just comparing all are having same frequncy or not it can be 1 or2 or 3  
 count=alphacount[str[0]-'a']; // why these is ->  comparing the frequency with another frequency (comparing can be any number)
 for(int i=0;i<26;i++)
 {
 if(alphacount[i]>0 && count!=alphacount[i])
 {
   printf("NO");                                                            or  printf("no");    
   c=1;     // can be used in both c or c++ (often in c++)                  return 0;  // in main func return 0 is equal to break;
   break;                              
   }
 printf("yes");                                                            printf("yes");
 }                                                                         return 0;
  
  
TEST CASE 1     TESTCASE 2           TESTCASE 3
V=1             B=1  BETTER          ELLES
E=1             E=2                  COUNT =alphacount[e-a] e=5 a=1 alphacount[4] arr[0]=a arr[4]=e
N=1             T=2                  e=2 l=2 s=1
O=1             R=1                  iteration1 alphacount[4]>0 && 2!=alphacount[4] that is 2!=2
M=1                                  iteration2 alphacount[12]>0 && 2!=alphacount[12] that is 2!=2
                                     iteration3 alphacount[19]>0&& 2!=alphacount[19] that is 2!=1 true
  
